#!/usr/bin/env python3
"""
Test Multiple Answer Extraction
===============================

Test the multiple answer detection functionality
"""

import re
from typing import List

def extract_multiple_answers(text: str) -> List[str]:
    """Extract multiple Thai choice answers from text"""
    # Clean the text
    text = text.strip().lower()
    
    # Pattern 1: "‡∏Ç,‡∏á" or "‡∏Å,‡∏Ñ,‡∏á" 
    comma_pattern = re.search(r'([‡∏Å-‡∏á](?:,\s*[‡∏Å-‡∏á])+)', text)
    if comma_pattern:
        answers_str = comma_pattern.group(1)
        answers = [a.strip() for a in answers_str.split(',')]
        return [a for a in answers if a in ['‡∏Å', '‡∏Ç', '‡∏Ñ', '‡∏á']]
    
    # Pattern 2: "‡∏Ç ‡πÅ‡∏•‡∏∞ ‡∏á" or "‡∏Å ‡πÅ‡∏•‡∏∞ ‡∏Ñ ‡πÅ‡∏•‡∏∞ ‡∏á"
    and_pattern = re.search(r'([‡∏Å-‡∏á](?:\s*‡πÅ‡∏•‡∏∞\s*[‡∏Å-‡∏á])+)', text)
    if and_pattern:
        answers_str = and_pattern.group(1)
        answers = re.findall(r'[‡∏Å-‡∏á]', answers_str)
        return list(set(answers))  # Remove duplicates
    
    # Pattern 3: Multiple separate mentions like "‡∏Å ‡∏Ç ‡∏á" (but not in question text)
    # Look for multiple choice characters that appear after common answer keywords
    answer_section_patterns = [
        r'(?:‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö|‡∏ï‡∏≠‡∏ö|‡πÄ‡∏•‡∏∑‡∏≠‡∏Å|‡∏Ç‡πâ‡∏≠)[:\s]*(.+)',  # After answer keywords
        r'(.{0,50})$',  # Last 50 characters (likely the answer)
    ]
    
    for section_pattern in answer_section_patterns:
        section_match = re.search(section_pattern, text, re.IGNORECASE)
        if section_match:
            answer_section = section_match.group(1)
            # Only look for multiple chars in the answer section
            section_chars = re.findall(r'[‡∏Å-‡∏á]', answer_section)
            if len(section_chars) > 1:
                unique_answers = list(dict.fromkeys(section_chars))
                # Only return if reasonable number and no common Thai words
                if 2 <= len(unique_answers) <= 4:
                    # Avoid cases where chars are part of Thai words
                    if not any(word in answer_section for word in ['‡∏Ñ‡∏∑‡∏≠', '‡πÄ‡∏õ‡πá‡∏ô', '‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö', '‡∏Ç‡πâ‡∏≠']):
                        return unique_answers
    
    return []

def extract_single_answer(text: str) -> str:
    """Extract single Thai choice answer from text"""
    # Look for various single answer patterns
    patterns = [
        r'\[([‡∏Å-‡∏á])\]',                    # [‡∏Å]
        r'^([‡∏Å-‡∏á])',                       # ‡∏Å at start of line
        r'‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö[:\s]*(?:‡∏Ñ‡∏∑‡∏≠\s*)?([‡∏Å-‡∏á])',  # ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: ‡∏Å or ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠ ‡∏Å
        r'‡∏ï‡∏≠‡∏ö[:\s]*([‡∏Å-‡∏á])',               # ‡∏ï‡∏≠‡∏ö: ‡∏Å
        r'‡πÄ‡∏•‡∏∑‡∏≠‡∏Å\s*([‡∏Å-‡∏á])',                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å
        r'([‡∏Å-‡∏á])\s*(?:‡∏Ñ‡∏∑‡∏≠|‡πÄ‡∏õ‡πá‡∏ô)',        # ‡∏Å ‡∏Ñ‡∏∑‡∏≠
        r'(?:‡∏Ñ‡∏∑‡∏≠|‡πÄ‡∏õ‡πá‡∏ô)\s*([‡∏Å-‡∏á])',         # ‡∏Ñ‡∏∑‡∏≠ ‡∏Å
        r'([‡∏Å-‡∏á])\s*‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö',            # ‡∏Å ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text.lower())
        if match:
            return match.group(1)
    
    # Last resort: any Thai choice character
    choice_match = re.search(r'[‡∏Å-‡∏á]', text)
    if choice_match:
        return choice_match.group()
    
    return None

def test_extraction():
    """Test the extraction functions"""
    print("üß™ Testing Multiple Answer Extraction")
    print("=" * 40)
    
    # Test cases for multiple answers
    multiple_test_cases = [
        ("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠ ‡∏Ç,‡∏á", ["‡∏Ç", "‡∏á"]),
        ("‡∏Å,‡∏Ñ,‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ["‡∏Å", "‡∏Ñ", "‡∏á"]),
        ("‡∏ï‡∏≠‡∏ö: ‡∏Ç ‡πÅ‡∏•‡∏∞ ‡∏á", ["‡∏Ç", "‡∏á"]),
        ("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å ‡πÅ‡∏•‡∏∞ ‡∏Ñ ‡πÅ‡∏•‡∏∞ ‡∏á", ["‡∏Å", "‡∏Ñ", "‡∏á"]),
        ("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡∏Å ‡∏Ç ‡∏Ñ", ["‡∏Å", "‡∏Ç", "‡∏Ñ"]),
        ("‡∏Ç, ‡∏á", ["‡∏Ç", "‡∏á"]),
        ("[‡∏Å,‡∏á]", ["‡∏Å", "‡∏á"]),
    ]
    
    # Test cases for single answers
    single_test_cases = [
        ("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠ ‡∏á", "‡∏á"),
        ("[‡∏Ç]", "‡∏Ç"),
        ("‡∏ï‡∏≠‡∏ö: ‡∏Å", "‡∏Å"),
        ("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Ñ", "‡∏Ñ"),
        ("‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å", "‡∏á"),
        ("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡∏Ç", "‡∏Ç"),
    ]
    
    print("üìä Testing Multiple Answers:")
    passed_multiple = 0
    for i, (text, expected) in enumerate(multiple_test_cases, 1):
        result = extract_multiple_answers(text)
        if result == expected or set(result) == set(expected):
            print(f"  ‚úÖ Test {i}: '{text}' ‚Üí {result}")
            passed_multiple += 1
        else:
            print(f"  ‚ùå Test {i}: '{text}' ‚Üí {result} (expected: {expected})")
    
    print(f"\nüìä Testing Single Answers:")
    passed_single = 0
    for i, (text, expected) in enumerate(single_test_cases, 1):
        # For single answers, we use multiple first, then fallback to single
        result_multiple = extract_multiple_answers(text)
        if result_multiple:
            result = result_multiple[0] if len(result_multiple) == 1 else None
        else:
            result = extract_single_answer(text)
        
        if result == expected:
            print(f"  ‚úÖ Test {i}: '{text}' ‚Üí '{result}'")
            passed_single += 1
        else:
            print(f"  ‚ùå Test {i}: '{text}' ‚Üí '{result}' (expected: '{expected}')")
    
    # Summary
    total_tests = len(multiple_test_cases) + len(single_test_cases)
    total_passed = passed_multiple + passed_single
    
    print(f"\nüéØ Test Results:")
    print(f"  Multiple answers: {passed_multiple}/{len(multiple_test_cases)} passed")
    print(f"  Single answers: {passed_single}/{len(single_test_cases)} passed")
    print(f"  Overall: {total_passed}/{total_tests} passed ({total_passed/total_tests*100:.1f}%)")
    
    if total_passed == total_tests:
        print(f"\nüéâ All tests passed! Multiple answer detection is working correctly.")
    else:
        print(f"\n‚ö†Ô∏è  Some tests failed. Review the extraction logic.")
    
    return total_passed == total_tests

def main():
    """Main test function"""
    success = test_extraction()
    
    if success:
        print(f"\n‚úÖ Ready for multiple answer processing!")
        print(f"üöÄ The system can now handle:")
        print(f"   ‚Ä¢ Single answers: '1,\"‡∏á\"'")
        print(f"   ‚Ä¢ Multiple answers: '5,\"‡∏Ç,‡∏á\"'")
        print(f"   ‚Ä¢ Complex answers: '10,\"‡∏Å,‡∏Ñ,‡∏á\"'")
    else:
        print(f"\nüîß Fix extraction logic before proceeding")

if __name__ == "__main__":
    main()