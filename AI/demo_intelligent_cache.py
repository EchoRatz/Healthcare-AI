#!/usr/bin/env python3
"""
Demo script showcasing the intelligent knowledge caching system
This demonstrates how the Thai Healthcare Q&A system learns from questions
and uses that knowledge to answer new questions not in the original dataset.
"""

from thai_qa_processor import ThaiHealthcareQA
import time

def demo_knowledge_extraction():
    """Demonstrate how the system extracts and caches knowledge"""
    print("üß† Thai Healthcare AI - Intelligent Knowledge Caching Demo")
    print("=" * 70)
    print("This demo shows how the AI learns from each Q&A and builds knowledge")
    print("=" * 70)
    
    # Initialize the system
    print("\nüöÄ Initializing Thai Healthcare Q&A System...")
    qa_system = ThaiHealthcareQA()
    
    # Show initial cache stats
    print("\nüìä Initial Knowledge Cache:")
    qa_system.show_cache_stats()
    
    # Test questions that will teach the system new information
    learning_questions = [
        {
            "question": "‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ü‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡∏≠‡∏ö‡∏ü‡∏•‡∏π‡∏≠‡∏≠‡πÑ‡∏£‡∏î‡πå‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£? ‡∏Å. 50 ‡∏ö‡∏≤‡∏ó ‡∏Ç. 100 ‡∏ö‡∏≤‡∏ó ‡∏Ñ. 150 ‡∏ö‡∏≤‡∏ó ‡∏á. 200 ‡∏ö‡∏≤‡∏ó",
            "topic": "Dental fluoride treatment costs"
        },
        {
            "question": "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥ UCEP ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á? ‡∏Å. ‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡∏Ç. ‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á ‡∏Ñ. ‡πÑ‡∏Ç‡πâ‡∏´‡∏ß‡∏±‡∏î‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡∏á. ‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á",
            "topic": "UCEP coverage symptoms"
        },
        {
            "question": "‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á? ‡∏Å. ‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏Ç. ‡∏´‡πâ‡∏≠‡∏á‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Ñ. ‡πÇ‡∏™‡∏ï ‡∏®‡∏≠ ‡∏ô‡∏≤‡∏™‡∏¥‡∏Å ‡∏á. ‡∏à‡∏±‡∏Å‡∏©‡∏∏",
            "topic": "24-hour hospital departments"
        }
    ]
    
    print("\nüéì Teaching the AI with new questions...")
    print("-" * 50)
    
    for i, q_data in enumerate(learning_questions, 1):
        print(f"\nüìö Learning Question {i}: {q_data['topic']}")
        print(f"Q: {q_data['question'][:80]}...")
        
        # Answer the question (this will extract and cache knowledge)
        answer = qa_system.answer_question(q_data['question'])
        
        # Show shortened answer
        short_answer = answer[:100] + "..." if len(answer) > 100 else answer
        print(f"A: {short_answer}")
        
        time.sleep(1)  # Small delay to show progression
    
    # Show updated cache stats
    print("\n" + "=" * 50)
    print("üìà Knowledge Cache After Learning:")
    qa_system.show_cache_stats()
    
    # Export the learned knowledge
    print("\nüíæ Exporting learned knowledge...")
    qa_system.export_cache_to_text("demo_learned_knowledge.txt")
    
    print("\n" + "=" * 50)
    print("üéØ Now testing with NEW questions that use cached knowledge...")
    print("-" * 50)
    
    # Test questions that should benefit from cached knowledge (mix of multiple choice and open-ended)
    test_questions = [
        {
            "question": "‡∏â‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡∏≠‡∏ö‡∏ü‡∏•‡∏π‡∏≠‡∏≠‡πÑ‡∏£‡∏î‡πå ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£?",
            "type": "Open-ended (Price inquiry)"
        },
        {
            "question": "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πà‡∏≤‡∏¢ UCEP ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
            "type": "Open-ended (UCEP coverage)"
        },
        {
            "question": "‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏õ‡πÅ‡∏ú‡∏ô‡∏Å‡πÑ‡∏´‡∏ô?",
            "type": "Open-ended (Emergency department)"
        },
        {
            "question": "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡∏≠‡∏ö‡∏ü‡∏•‡∏π‡∏≠‡∏≠‡πÑ‡∏£‡∏î‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£? ‡∏Å. ‡∏ü‡∏£‡∏µ ‡∏Ç. 50 ‡∏ö‡∏≤‡∏ó ‡∏Ñ. 100 ‡∏ö‡∏≤‡∏ó ‡∏á. 150 ‡∏ö‡∏≤‡∏ó",
            "type": "Multiple choice (using cached price knowledge)"
        }
    ]
    
    for i, q_data in enumerate(test_questions, 1):
        print(f"\nüß™ Test Question {i} ({q_data['type']}):")
        print(f"Q: {q_data['question']}")
        
        # Answer using both original docs and cached knowledge
        print("üîç Searching knowledge base...")
        answer = qa_system.answer_question(q_data['question'], enable_caching=False)  # Don't cache test answers
        
        # Show answer
        short_answer = answer[:200] + "..." if len(answer) > 200 else answer
        print(f"A: {short_answer}")
        
        time.sleep(1)
    
    print("\n" + "=" * 70)
    print("‚úÖ Demo Complete!")
    print("The AI has learned from previous questions and can now answer")
    print("new questions using both original documents AND cached knowledge!")
    print(f"üìö Total facts learned: {len(qa_system.knowledge_cache['facts'])}")
    print("=" * 70)


def show_cache_details():
    """Show detailed cache information"""
    print("\nüîç Detailed Cache Analysis")
    print("-" * 30)
    
    qa_system = ThaiHealthcareQA()
    
    facts = qa_system.knowledge_cache.get("facts", [])
    if not facts:
        print("No cached facts found.")
        return
    
    print(f"Total cached facts: {len(facts)}")
    print("\nCached Knowledge:")
    
    for i, fact in enumerate(facts, 1):
        print(f"\n{i}. {fact.get('type', 'Unknown Type')}")
        print(f"   Key: {fact.get('key', 'N/A')}")
        print(f"   Value: {fact.get('value', 'N/A')}")
        if fact.get('context'):
            print(f"   Context: {fact['context']}")
        print(f"   Source: {fact.get('source_question', 'Unknown')[:60]}...")


if __name__ == "__main__":
    try:
        demo_knowledge_extraction()
        
        # Optionally show detailed cache
        user_input = input("\nü§î Would you like to see detailed cache information? (y/n): ")
        if user_input.lower() in ['y', 'yes']:
            show_cache_details()
            
    except KeyboardInterrupt:
        print("\n\nüëã Demo interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Demo error: {e}")
        print("Make sure Ollama is running and required models are installed")