#!/usr/bin/env python3
"""
Quick Demo of Thai Healthcare Q&A System
Demonstrates the system with sample questions
"""

import os
import sys

def check_demo_requirements():
    """Check if demo can run"""
    required_files = [
        'Healthcare-AI-Refactored/src/infrastructure/results_doc/direct_extraction_corrected.txt',
        'Healthcare-AI-Refactored/src/infrastructure/results_doc2/direct_extraction_corrected.txt', 
        'Healthcare-AI-Refactored/src/infrastructure/results_doc3/direct_extraction_corrected.txt'
    ]
    
    missing = [f for f in required_files if not os.path.exists(f)]
    if missing:
        print(f"‚ùå Missing demo files: {missing}")
        return False
    return True

def demo_thai_qa():
    """Demonstrate Thai Healthcare Q&A with sample questions"""
    print("üè• Thai Healthcare Q&A System - Demo")
    print("=" * 50)
    
    try:
        from thai_healthcare_qa_system import ThaiHealthcareQASystem
        
        # Initialize system
        print("üîß Initializing system...")
        knowledge_files = [
            'Healthcare-AI-Refactored/src/infrastructure/results_doc/direct_extraction_corrected.txt',
            'Healthcare-AI-Refactored/src/infrastructure/results_doc2/direct_extraction_corrected.txt',
            'Healthcare-AI-Refactored/src/infrastructure/results_doc3/direct_extraction_corrected.txt'
        ]
        
        qa_system = ThaiHealthcareQASystem(knowledge_files, memory_file="demo_memory.json")
        print("‚úÖ System initialized!")
        
        # Demo questions (from the test file)
        demo_questions = [
            {
                'id': 1,
                'question': '‡∏ú‡∏°‡∏õ‡∏ß‡∏î‡∏ó‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å ‡∏≠‡πâ‡∏ß‡∏Å‡∏î‡πâ‡∏ß‡∏¢ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡∏µ‡∏™‡∏≠‡∏á‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏Å‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?  ‡∏Å. Endocrinology ‡∏Ç. Orthopedics ‡∏Ñ. Emergency ‡∏á. Internal Medicine'
            },
            {
                'id': 2, 
                'question': '‡∏¢‡∏≤ Clopidogrel mg tablet ‡πÉ‡∏ô‡∏õ‡∏µ 2567 ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÉ‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏°‡πá‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ô‡∏≠‡∏Å (OP)?  ‡∏Å. 2 ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏°‡πá‡∏î ‡∏Ç. 3 ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏°‡πá‡∏î ‡∏Ñ. 4 ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏°‡πá‡∏î ‡∏á. 5 ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏°‡πá‡∏î'
            },
            {
                'id': 3,
                'question': '‡∏Ç‡πâ‡∏≠‡πÉ‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ß‡∏¥‡∏Å‡∏§‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πà‡∏≤‡∏¢‡∏™‡∏¥‡∏ó‡∏ò‡∏¥ UCEP?  ‡∏Å. ‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏ö‡∏û‡∏•‡∏±‡∏ô‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á ‡∏Ç. ‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á ‡∏Ñ. ‡∏°‡∏µ‡πÑ‡∏Ç‡πâ‡∏™‡∏π‡∏á ‡∏á. ‡∏õ‡∏ß‡∏î‡∏ó‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á'
            }
        ]
        
        print(f"\nüß† Processing {len(demo_questions)} demo questions:")
        print("-" * 50)
        
        results = []
        for demo_q in demo_questions:
            question, choices = qa_system.parse_question(demo_q['question'])
            
            print(f"\nüîç Question {demo_q['id']}:")
            print(f"‚ùì {question}")
            print("üìã Choices:")
            for choice_label, choice_text in choices.items():
                print(f"   {choice_label}. {choice_text}")
            
            # Get prediction
            result = qa_system._chain_of_thought_reasoning(question, choices)
            result.id = demo_q['id']
            results.append(result)
            
            # Show result
            print(f"üéØ Prediction: {', '.join(result.predicted_answers)}")
            print(f"üìä Confidence: {result.confidence:.3f}")
            
            if result.evidence:
                print(f"üîç Evidence: {result.evidence[0][:100]}...")
            
            print(f"üß† Reasoning: {result.reasoning_chain[-1]}")
        
        # Show submission format
        print(f"\nüìÑ Submission Format:")
        print("id,answer")
        for result in results:
            answer_str = ','.join(result.predicted_answers)
            print(f'{result.id},"{answer_str}"')
        
        print(f"\n‚úÖ Demo completed successfully!")
        print("Ready to run full processing with: python run_thai_qa.py")
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        print("Please install required packages: pip install -r requirements.txt")
    except Exception as e:
        print(f"‚ùå Demo error: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Run the demo"""
    if not check_demo_requirements():
        print("Please ensure all healthcare document files are available.")
        sys.exit(1)
    
    print("üöÄ Starting Thai Healthcare Q&A Demo...")
    demo_thai_qa()

if __name__ == "__main__":
    main()