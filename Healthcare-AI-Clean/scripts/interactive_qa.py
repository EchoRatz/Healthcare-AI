"""Interactive Q&A entry point."""
import sys
import os
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from infrastructure.repositories.CsvQuestionRepository import CsvQuestionRepository
from infrastructure.services.SimpleAnswerService import SimpleAnswerService
from core.services.QuestionParser import QuestionParser
from core.use_cases.ProcessSingleQuestion import ProcessSingleQuestion


class InteractiveQA:
    """Interactive Q&A session handler."""
    
    def __init__(self):
        self.question_repo = CsvQuestionRepository()
        self.answer_service = SimpleAnswerService()
        self.parser = QuestionParser()
        self.processor = ProcessSingleQuestion(self.answer_service)
    
    def run(self) -> None:
        """Run interactive Q&A session."""
        print("üéØ Healthcare AI - Interactive Q&A")
        print("=" * 50)
        print("Enter Thai healthcare questions with multiple choices.")
        print("Type 'quit', 'exit', or 'q' to stop.")
        print("Type 'help' for format examples.")
        print()
        
        question_id = 1
        
        while True:
            try:
                print(f"Question {question_id}:")
                user_input = input("‚ùì ").strip()
                
                if user_input.lower() in ['quit', 'exit', 'q']:
                    print("üëã Goodbye!")
                    break
                
                if user_input.lower() == 'help':
                    self._show_help()
                    continue
                
                if not user_input:
                    continue
                
                # Parse and process question
                question = self.parser.parse_from_text(str(question_id), user_input)
                
                if not question.choices:
                    print("‚ö†Ô∏è  No multiple choices detected. Please include ‡∏Å. ‡∏Ç. ‡∏Ñ. ‡∏á. options.")
                    continue
                
                # Get answer
                answer = self.processor.execute(question)
                
                print(f"üí° Answer: {answer.answer}")
                print(f"üéØ Confidence: {answer.confidence:.2f}")
                print()
                
                question_id += 1
                
            except KeyboardInterrupt:
                print("\nüëã Goodbye!")
                break
            except Exception as e:
                print(f"‚ùå Error: {e}")
    
    def _show_help(self) -> None:
        """Show help information."""
        print("\nüìã Question Format Examples:")
        print("=" * 30)
        print("Single line format:")
        print("‡∏ú‡∏°‡∏õ‡∏ß‡∏î‡∏ó‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏õ‡πÅ‡∏ú‡∏ô‡∏Å‡πÑ‡∏´‡∏ô? ‡∏Å. Emergency ‡∏Ç. Internal Medicine ‡∏Ñ. Surgery ‡∏á. Cardiology")
        print()
        print("Multi-line format:")
        print("‡∏¢‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÉ‡∏î?")
        print("‡∏Å. 100 ‡∏ö‡∏≤‡∏ó")
        print("‡∏Ç. 200 ‡∏ö‡∏≤‡∏ó")
        print("‡∏Ñ. 300 ‡∏ö‡∏≤‡∏ó")
        print("‡∏á. 400 ‡∏ö‡∏≤‡∏ó")
        print("=" * 30)
        print()


def main():
    """Main entry point."""
    try:
        qa = InteractiveQA()
        qa.run()
    except Exception as e:
        print(f"‚ùå Error starting interactive session: {e}")


if __name__ == "__main__":
    main()