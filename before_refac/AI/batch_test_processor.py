#!/usr/bin/env python3
"""
Batch processor for test.csv questions
Processes all Thai healthcare questions and outputs only choice letters (‡∏Å, ‡∏Ç, ‡∏Ñ, ‡∏á)
"""

from thai_qa_processor import ThaiHealthcareQA
import sys
import os
import csv


def validate_csv_format(csv_file_path):
    """Validate that the CSV file has the correct format"""
    try:
        with open(csv_file_path, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            
            # Check if required columns exist
            if 'id' not in reader.fieldnames or 'question' not in reader.fieldnames:
                return False, "CSV must have 'id' and 'question' columns"
            
            # Check first few rows
            row_count = 0
            for row in reader:
                if not row['id'] or not row['question']:
                    return False, f"Empty id or question in row {row_count + 1}"
                row_count += 1
                if row_count >= 3:  # Check first 3 rows
                    break
            
            return True, f"Valid CSV with {row_count}+ questions"
            
    except Exception as e:
        return False, f"Error reading CSV: {str(e)}"


def preview_csv(csv_file_path, num_rows=3):
    """Preview first few rows of CSV"""
    try:
        with open(csv_file_path, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            
            print(f"üìã Preview of {csv_file_path}:")
            print("-" * 80)
            
            for i, row in enumerate(reader):
                if i >= num_rows:
                    break
                    
                question_preview = row['question'][:100] + "..." if len(row['question']) > 100 else row['question']
                print(f"ID {row['id']}: {question_preview}")
                
            print("-" * 80)
            
    except Exception as e:
        print(f"‚ùå Error previewing CSV: {e}")


def show_usage():
    """Show usage information"""
    print("\nüí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:")
    print("   python batch_test_processor.py [input.csv] [output.csv] [batch_size] [flags]")
    print("\nüìÅ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:")
    print("   python batch_test_processor.py                    # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
    print("   python batch_test_processor.py test.csv          # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ü‡∏•‡πå input")
    print("   python batch_test_processor.py test.csv results.csv  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ü‡∏•‡πå input ‡πÅ‡∏•‡∏∞ output")
    print("   python batch_test_processor.py test.csv results.csv 10  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î batch size")
    print("   python batch_test_processor.py test.csv results.csv 10 --auto  # ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    print("\nüè∑Ô∏è  Flags:")
    print("   --auto, -y    : ‡πÑ‡∏°‡πà‡∏ñ‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ")
    print("   --sample      : ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
    print("   --help, -h    : ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
    print("\nüìã ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö CSV ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:")
    print("   id,question,answer")
    print("   1,‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°? ‡∏Å. ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å1 ‡∏Ç. ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å2 ‡∏Ñ. ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å3 ‡∏á. ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å4,")


def show_help():
    """Show detailed help information"""
    print("üéØ Thai Healthcare Q&A Batch Processor")
    print("=" * 60)
    print("‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV")
    print("‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡∏Å, ‡∏Ç, ‡∏Ñ, ‡∏á ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    show_usage()
    print("\nüîß ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏ö‡∏ö:")
    print("   - Ollama ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà")
    print("   - Models: llama3.2, mxbai-embed-large")
    print("   - Python packages: langchain-ollama, langchain-chroma, langchain-core")
    print("\nüìä ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥:")
    print("   ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö CSV ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    print("   ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
    print("   ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö batch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")
    print("   ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
    print("   ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")


def main():
    """Main function to process test.csv in batch mode"""
    
    # Default paths - look for test.csv in current directory or parent directory
    possible_paths = ["test.csv", "../test.csv", "AI/test.csv"]
    input_csv = None
    
    # Find test.csv file
    for path in possible_paths:
        if os.path.exists(path):
            input_csv = path
            break
    
    if input_csv is None:
        input_csv = "test.csv"  # Default fallback
    
    output_csv = "test_answers.csv"
    batch_size = 5  # Smaller batch size for better monitoring
    
    # Check if custom paths provided
    if len(sys.argv) > 1:
        input_csv = sys.argv[1]
    if len(sys.argv) > 2:  
        output_csv = sys.argv[2]
    if len(sys.argv) > 3:
        batch_size = int(sys.argv[3])
    
    # Check if input file exists
    if not os.path.exists(input_csv):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {input_csv}")
        print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {os.path.abspath(input_csv)}")
        show_usage()
        return
    
    print("üéØ Thai Healthcare Q&A Batch Processor")
    print("=" * 60)
    print(f"üìù Input file: {input_csv}")
    print(f"üíæ Output file: {output_csv}")
    print(f"üì¶ Batch size: {batch_size}")
    print("=" * 60)
    
    # Validate CSV format
    print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö CSV...")
    is_valid, message = validate_csv_format(input_csv)
    
    if not is_valid:
        print(f"‚ùå {message}")
        print("\nüìã ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö CSV ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:")
        print("id,question,answer")
        print("1,‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°? ‡∏Å. ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å1 ‡∏Ç. ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å2 ‡∏Ñ. ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å3 ‡∏á. ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å4,")
        return
    
    print(f"‚úÖ {message}")
    
    # Preview CSV content
    preview_csv(input_csv)
    
    # Count total questions
    try:
        with open(input_csv, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            total_questions = sum(1 for row in reader)
        print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_questions} ‡∏Ç‡πâ‡∏≠")
    except Exception as e:
        print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ: {e}")
        total_questions = "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö"
    
    print("=" * 60)
    
    # Confirm before processing (unless --auto flag is used)
    auto_mode = '--auto' in sys.argv or '-y' in sys.argv
    
    if not auto_mode:
        response = input("ü§î ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ").lower().strip()
        if response not in ['y', 'yes', '‡πÉ‡∏ä‡πà']:
            print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
            return
    else:
        print("ü§ñ ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ")
    
    print("=" * 60)
    
    try:
        # Initialize the Q&A system
        print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...")
        qa_system = ThaiHealthcareQA()
        print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        print()
        
        # Process the CSV file
        if batch_size > 1:
            qa_system.process_csv_batch(input_csv, batch_size, output_csv)
        else:
            qa_system.process_csv_questions(input_csv, output_csv)
        
        # Show completion summary
        print("\n" + "=" * 60)
        print("üéâ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        
        # Show output file info
        if os.path.exists(output_csv):
            file_size = os.path.getsize(output_csv)
            print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {output_csv}")
            print(f"üìä ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {file_size:,} bytes")
            
            # Preview results
            print("\nüìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:")
            try:
                with open(output_csv, 'r', encoding='utf-8') as file:
                    reader = csv.DictReader(file)
                    for i, row in enumerate(reader):
                        if i >= 5:  # Show first 5 results
                            break
                        print(f"   Q{row['id']}: {row['answer']}")
                print("   ...")
            except Exception as e:
                print(f"   ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ: {e}")
        
        print("=" * 60)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        print("üìÅ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        print("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
        print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Ollama ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà")
        print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á models ‡πÅ‡∏•‡πâ‡∏ß: llama3.2, mxbai-embed-large")
        print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå CSV")


def process_sample_questions():
    """Process just a few sample questions for testing"""
    
    sample_csv = "sample_test.csv"
    
    # Create a small sample CSV for testing
    import csv
    
    sample_questions = [
        {
            'id': '1',
            'question': '‡∏ú‡∏°‡∏õ‡∏ß‡∏î‡∏ó‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å ‡∏≠‡πâ‡∏ß‡∏Å‡∏î‡πâ‡∏ß‡∏¢ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡∏µ‡∏™‡∏≠‡∏á‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏Å‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?  ‡∏Å. Endocrinology ‡∏Ç. Orthopedics ‡∏Ñ. Emergency ‡∏á. Internal Medicine',
            'answer': ''
        },
        {
            'id': '2', 
            'question': '‡∏¢‡∏≤ Clopidogrel mg tablet ‡πÉ‡∏ô‡∏õ‡∏µ 2567 ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÉ‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏°‡πá‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ô‡∏≠‡∏Å (OP)?  ‡∏Å. 2 ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏°‡πá‡∏î ‡∏Ç. 3 ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏°‡πá‡∏î ‡∏Ñ. 4 ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏°‡πá‡∏î ‡∏á. 5 ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏°‡πá‡∏î',
            'answer': ''
        },
        {
            'id': '3',
            'question': '‡∏Ç‡πâ‡∏≠‡πÉ‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ß‡∏¥‡∏Å‡∏§‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πà‡∏≤‡∏¢‡∏™‡∏¥‡∏ó‡∏ò‡∏¥ UCEP?  ‡∏Å. ‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏ö‡∏û‡∏•‡∏±‡∏ô‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á ‡∏Ç. ‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á ‡∏Ñ. ‡∏°‡∏µ‡πÑ‡∏Ç‡πâ‡∏™‡∏π‡∏á ‡∏á. ‡∏õ‡∏ß‡∏î‡∏ó‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á',
            'answer': ''
        }
    ]
    
    # Write sample CSV
    with open(sample_csv, 'w', encoding='utf-8', newline='') as file:
        fieldnames = ['id', 'question', 'answer']
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(sample_questions)
    
    print("üß™ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
    print("=" * 60)
    
    try:
        qa_system = ThaiHealthcareQA()
        qa_system.process_csv_questions(sample_csv, "sample_answers.csv")
        
        # Clean up
        os.remove(sample_csv)
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")


if __name__ == "__main__":
    # Check for help flags
    if '--help' in sys.argv or '-h' in sys.argv:
        show_help()
    elif '--sample' in sys.argv:
        process_sample_questions()
    else:
        main()