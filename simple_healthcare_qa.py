#!/usr/bin/env python3
"""
Simple Healthcare QA System
No external dependencies required - uses local knowledge base only
"""

import os
import re
from typing import List, Dict, Tuple
from dataclasses import dataclass


@dataclass
class QuestionAnalysis:
    """Analysis of a question's intent and requirements"""
    question_type: str
    keywords: List[str]
    entities: List[str]
    context_needed: List[str]
    confidence: float


class SimpleHealthcareQA:
    """Simple healthcare Q&A system using local knowledge base only"""

    def __init__(self):
        self.knowledge_base = {}
        self.healthcare_policies = self._load_healthcare_policies()
        self.question_patterns = self._load_question_patterns()
        self.load_knowledge_base()

    def load_knowledge_base(self):
        """Load and index knowledge base for better search"""
        print("üìö Loading knowledge base...")
        
        doc_files = [
            "Healthcare-AI-Refactored/src/infrastructure/results_doc/direct_extraction_corrected.txt",
            "Healthcare-AI-Refactored/src/infrastructure/results_doc2/direct_extraction_corrected.txt",
            "Healthcare-AI-Refactored/src/infrastructure/results_doc3/direct_extraction_corrected.txt",
            "Healthcare-AI-Refactored/src/infrastructure/result_mcp/hospital_micro_facts.txt",
        ]
        
        for i, doc_file in enumerate(doc_files, 1):
            if os.path.exists(doc_file):
                with open(doc_file, "r", encoding="utf-8") as f:
                    content = f.read()
                    self._index_document(content, f"doc_{i}")
                    print(f"  ‚úÖ Document {i}: {len(content):,} chars indexed")
            else:
                print(f"  ‚ö†Ô∏è  Document {i} not found: {doc_file}")
    
    def _index_document(self, content: str, doc_id: str):
        """Index document content for better search"""
        # Split into sections and index by keywords
        sections = content.split("--- Page")
        
        for section in sections:
            if len(section.strip()) < 50:  # Skip very short sections
                continue
                
            # Extract key terms
            keywords = self._extract_keywords(section)
            
            for keyword in keywords:
                if keyword not in self.knowledge_base:
                    self.knowledge_base[keyword] = []
                self.knowledge_base[keyword].append({
                    'doc_id': doc_id,
                    'content': section,
                    'relevance': self._calculate_relevance(keyword, section)
                })
    
    def _extract_keywords(self, text: str) -> List[str]:
        """Extract relevant keywords from text"""
        # Thai healthcare specific keywords
        thai_keywords = [
            "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥", "‡∏´‡∏•‡∏±‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô", "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", "‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤", "‡∏¢‡∏≤", "‡∏ï‡∏£‡∏ß‡∏à", "‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î",
            "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡πÅ‡∏û‡∏ó‡∏¢‡πå", "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢", "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡πÇ‡∏£‡∏Ñ",
            "‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏≠‡∏î", "‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô", "‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô", "‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠", "‡πÉ‡∏ö‡∏™‡πà‡∏á‡∏ï‡∏±‡∏ß", "‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏≠‡∏á",
            "‡πÅ‡∏ú‡∏ô‡∏Å", "department", "cardiology", "emergency", "pediatrics"
        ]
        
        # Extract numbers and specific terms
        numbers = re.findall(r'\d+', text)
        specific_terms = re.findall(r'[‡∏Å-‡∏Æ]{2,}', text)
        
        keywords = []
        for keyword in thai_keywords:
            if keyword in text:
                keywords.append(keyword)
        
        keywords.extend(numbers[:5])  # Limit numbers
        keywords.extend(specific_terms[:10])  # Limit specific terms
        
        return list(set(keywords))
    
    def _calculate_relevance(self, keyword: str, text: str) -> float:
        """Calculate relevance score for keyword in text"""
        if keyword not in text:
            return 0.0
        
        # Simple frequency-based relevance
        count = text.count(keyword)
        length = len(text)
        return min(count / (length / 1000), 1.0)  # Normalize by text length
    
    def analyze_question(self, question_text: str) -> QuestionAnalysis:
        """Analyze question to understand intent and requirements"""
        question_type = "factual"  # Default
        keywords = []
        entities = []
        context_needed = []
        confidence = 0.5
        
        # Detect question type
        for qtype, patterns in self.question_patterns.items():
            for pattern in patterns:
                if re.search(pattern, question_text):
                    question_type = qtype
                    confidence += 0.2
                    break
        
        # Extract keywords and entities
        keywords = self._extract_keywords(question_text)
        
        # Extract healthcare entities
        for policy, info in self.healthcare_policies.items():
            if any(keyword in question_text for keyword in info["keywords"]):
                entities.append(policy)
                context_needed.extend(info["keywords"])
        
        return QuestionAnalysis(
            question_type=question_type,
            keywords=keywords,
            entities=entities,
            context_needed=context_needed,
            confidence=confidence
        )
    
    def search_context(self, question_analysis: QuestionAnalysis, max_chars: int = 3000) -> str:
        """Search for relevant context based on question analysis"""
        relevant_sections = []
        total_chars = 0
        
        # Search by keywords
        for keyword in question_analysis.keywords:
            if keyword in self.knowledge_base:
                for entry in self.knowledge_base[keyword]:
                    if total_chars + len(entry['content']) <= max_chars:
                        relevant_sections.append(entry['content'])
                        total_chars += len(entry['content'])
                    else:
                        break
        
        # Search by entities
        for entity in question_analysis.entities:
            if entity in self.healthcare_policies:
                policy_info = self.healthcare_policies[entity]
                policy_text = f"Policy: {entity}\nIncludes: {', '.join(policy_info['includes'])}\nExcludes: {', '.join(policy_info['excludes'])}"
                if total_chars + len(policy_text) <= max_chars:
                    relevant_sections.append(policy_text)
                    total_chars += len(policy_text)
        
        return "\n\n".join(relevant_sections)
    
    def _load_healthcare_policies(self) -> Dict:
        """Load comprehensive Thai healthcare policy knowledge"""
        return {
            "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏´‡∏•‡∏±‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥": {
                "includes": [
                    "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "‡∏¢‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô", "‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î", "‡∏Å‡∏≤‡∏£‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π",
                    "‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏£‡∏Ñ‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á", "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", "‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô", "‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏≠‡∏î",
                    "‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô", "‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠", "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£",
                    "‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô", "‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏ô"
                ],
                "excludes": [
                    "‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°", "‡∏¢‡∏≤‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡πÄ‡∏ô‡∏°", "‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©",
                    "‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï"
                ],
                "keywords": ["‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏≠‡∏á", "‡∏´‡∏•‡∏±‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô", "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥", "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£", "‡∏ü‡∏£‡∏µ"]
            },
            "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°": {
                "includes": [
                    "‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á‡∏ó‡∏î‡πÅ‡∏ó‡∏ô", "‡πÄ‡∏á‡∏¥‡∏ô‡∏ä‡∏î‡πÄ‡∏ä‡∏¢", "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
                    "‡∏Å‡∏≤‡∏£‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û", "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", "‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏≠‡∏î", "‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏£‡∏Ñ"
                ],
                "excludes": [
                    "‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°", "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï"
                ],
                "keywords": ["‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°", "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô", "‡∏™‡∏±‡∏á‡∏Ñ‡∏°", "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£"]
            }
        }
    
    def _load_question_patterns(self) -> Dict:
        """Load question pattern recognition rules"""
        return {
            "inclusion": [
                r"‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°", r"‡∏£‡∏ß‡∏°", r"‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥", r"‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö", r"‡∏ü‡∏£‡∏µ", r"‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"
            ],
            "exclusion": [
                r"‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°", r"‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°", r"‡πÄ‡∏™‡∏µ‡∏¢‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", r"‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢", r"‡πÑ‡∏°‡πà‡∏ü‡∏£‡∏µ"
            ],
            "comparison": [
                r"‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô", r"‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", r"‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô", r"‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å", r"‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤", r"‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤"
            ],
            "procedure": [
                r"‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô", r"‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£", r"‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥", r"‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ", r"‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ", r"‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°"
            ]
        }
    
    def answer_question(self, question: str) -> str:
        """Answer a healthcare question using local knowledge"""
        # Analyze question
        analysis = self.analyze_question(question)
        
        # Search for context
        context = self.search_context(analysis)
        
        if not context:
            return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
        
        # Extract relevant information
        relevant_info = context[:800] + "..." if len(context) > 800 else context
        
        # Find matching keywords
        keywords = self._extract_keywords(question)
        matched_keywords = [k for k in keywords if k in self.knowledge_base]
        
        # Build answer
        answer_parts = []
        answer_parts.append(f"üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:")
        answer_parts.append(relevant_info)
        
        if matched_keywords:
            answer_parts.append(f"\nüîç ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏û‡∏ö: {', '.join(matched_keywords[:5])}")
        
        # Add policy information if relevant
        for entity in analysis.entities:
            if entity in self.healthcare_policies:
                policy = self.healthcare_policies[entity]
                answer_parts.append(f"\nüìã ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ {entity}:")
                answer_parts.append(f"  ‚úÖ ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°: {', '.join(policy['includes'][:5])}")
                answer_parts.append(f"  ‚ùå ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°: {', '.join(policy['excludes'][:3])}")
        
        return "\n".join(answer_parts)
    
    def interactive_mode(self):
        """Interactive mode for asking questions"""
        print("üè• Simple Healthcare QA System")
        print("=" * 50)
        print("Ask healthcare questions! Type 'quit' to exit.")
        print("Note: Uses local knowledge base only.")
        print("-" * 50)
        
        while True:
            try:
                question = input("\nüí¨ Your question: ").strip()
                
                if question.lower() in ['quit', 'exit', 'q']:
                    print("üëã Goodbye!")
                    break
                
                if not question:
                    continue
                
                # Get answer
                answer = self.answer_question(question)
                print(f"\nü§ñ Answer:\n{answer}")
                
            except KeyboardInterrupt:
                print("\nüëã Goodbye!")
                break
            except Exception as e:
                print(f"‚ùå Error: {e}")


def main():
    """Main function"""
    print("üè• Simple Healthcare QA System")
    print("=" * 50)
    
    qa_system = SimpleHealthcareQA()
    qa_system.interactive_mode()


if __name__ == "__main__":
    main() 