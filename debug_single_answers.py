#!/usr/bin/env python3
"""
Debug Single Answer Extraction
===============================
"""

import re

def extract_single_answer(text: str) -> str:
    """Extract single Thai choice answer from text"""
    print(f"    Debugging text: '{text}' (lowercase: '{text.lower()}')")
    
    # Look for various single answer patterns
    patterns = [
        (r'\[([‡∏Å-‡∏á])\]', "[‡∏Å]"),
        (r'^([‡∏Å-‡∏á])', "‡∏Å at start"),
        (r'‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö[:\s]*(?:‡∏Ñ‡∏∑‡∏≠\s*)?([‡∏Å-‡∏á])', "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: ‡∏Å or ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠ ‡∏Å"),
        (r'‡∏ï‡∏≠‡∏ö[:\s]*([‡∏Å-‡∏á])', "‡∏ï‡∏≠‡∏ö: ‡∏Å"),
        (r'‡πÄ‡∏•‡∏∑‡∏≠‡∏Å\s*([‡∏Å-‡∏á])', "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å"),
        (r'([‡∏Å-‡∏á])\s*(?:‡∏Ñ‡∏∑‡∏≠|‡πÄ‡∏õ‡πá‡∏ô)', "‡∏Å ‡∏Ñ‡∏∑‡∏≠/‡πÄ‡∏õ‡πá‡∏ô"),
        (r'(?:‡∏Ñ‡∏∑‡∏≠|‡πÄ‡∏õ‡πá‡∏ô)\s*([‡∏Å-‡∏á])', "‡∏Ñ‡∏∑‡∏≠/‡πÄ‡∏õ‡πá‡∏ô ‡∏Å"),
        (r'([‡∏Å-‡∏á])\s*‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö', "‡∏Å ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"),
    ]
    
    for i, (pattern, desc) in enumerate(patterns):
        match = re.search(pattern, text.lower())
        if match:
            print(f"    ‚úÖ Pattern {i+1} ({desc}) matched: {match.group(1)}")
            return match.group(1)
        else:
            print(f"    ‚ùå Pattern {i+1} ({desc}) no match")
    
    # Last resort: any Thai choice character
    choice_match = re.search(r'[‡∏Å-‡∏á]', text)
    if choice_match:
        print(f"    ‚úÖ Fallback matched: {choice_match.group()}")
        return choice_match.group()
    else:
        print(f"    ‚ùå No Thai characters found")
    
    return None

# Test the problematic cases
test_cases = [
    "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠ ‡∏á",
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Ñ", 
    "‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å",
    "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡∏Ç"
]

print("üîç Debugging Single Answer Extraction")
print("=" * 40)

for text in test_cases:
    print(f"\nTesting: '{text}'")
    result = extract_single_answer(text)
    print(f"Result: {result}")
    print("-" * 30)